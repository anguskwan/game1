/**
 * Created by xykong on 2014/7/16.
 */
var dgram = require('dgram');
var util = require('util');
var pomeloLogger = require('pomelo/node_modules/pomelo-logger');
var gameConst = require('../../app/tools/constValue');
var _ = require('underscore');
var config = require('../../app/tools/config');

module.exports = {
    getLogger: getLogger,

    configure: configure,

    log: log,

    logFormat: logFormat
};

var DEFAULT_PORT = 6667;
var DEFAULT_HOST = '188.188.0.162';

//var usedPort = DEFAULT_PORT;
//var usedHost = DEFAULT_HOST;

var usedConfig = {};
var usedSelectedHost = 0;

var client = dgram.createSocket('udp4'); // ipv4

var Logger = function (categoryName) {
    this.categoryName = categoryName;
    this.owner = this;
    this.log = log;
    this.logFormat = logFormat;
};

var pLogger = {};

function configure(config) {

    if (typeof config === 'string') {
        config = JSON.parse(fs.readFileSync(config, "utf8"));
    }

//    if (config && config.port) {
//        usedPort = config.port;
//    }
//
//    if (config && config.host) {
//        usedHost = config.host;
//    }

    usedConfig = config;
};

function getLogger(categoryName) {

    return new Logger(categoryName);
};


var dateString = function () {
    var dateTime = new Date();
//    var year = dateTime.getFullYear();
//    var mouth = dateTime.getMonth() + 1;
//    var day = dateTime.getDate();
//    var hour = dateTime.getHours();
//    var minute = dateTime.getMinutes();
//    var second = dateTime.getSeconds();

//    return util.format("%d-%d-%d %d:%d:%d", year, mouth, day, hour, minute, second);

    return dateFormat(dateTime, "yyyy-MM-dd hh:mm:ss");
};

var dateFormat = function (dateTime, fmt) {
    var o = {
        "M+": dateTime.getMonth() + 1,
        "d+": dateTime.getDate(),
        "h+": dateTime.getHours(),
        "m+": dateTime.getMinutes(),
        "s+": dateTime.getSeconds(),
        "q+": Math.floor((dateTime.getMonth() + 3) / 3),
        "S": dateTime.getMilliseconds()
    };
    if (/(y+)/.test(fmt)) {
        fmt = fmt.replace(RegExp.$1, (dateTime.getFullYear() + "").substr(4 - RegExp.$1.length));
    }
    for (var k in o) {
        if (new RegExp("(" + k + ")").test(fmt)) {
            fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) :
                                         (("00" + o[k]).substr((""
                                                                + o[k]).length)));
        }
    }
    return fmt;
}

function log() {

    var args = Array.prototype.slice.call(arguments, 0);
    var logger = pomeloLogger.getLogger('tlog', this.categoryName);

    var params = {};
    if (_.isObject(args[0])) {
        params = args.shift();
    }

    var info = args;
//    var info = args.map(function (item) {
//        if (!item) {
//            logger.error('tlog: %j', arguments);
//        }
//        return item.toString();
//    });

    var logType = info.shift();
    var accountType = info.shift();
    var openId = info.shift();
    var gameAppId = 'default-gameAppId';

    if (accountType == gameConst.eLoginType.LT_QQ) {
        gameAppId = config.vendors.msdkOauth.appid;
    } else if (accountType == gameConst.eLoginType.LT_WX) {
        gameAppId = config.vendors.wxOauth.appid;
    } else if (accountType == gameConst.eLoginType.LT_TENCENT_GUEST) {
        gameAppId = 'G_' + config.vendors.msdkOauth.appid;
    }

    info.splice(0, 0, logType, usedConfig.GameSvrId, dateString(), gameAppId, usedConfig.PlatID, openId);

    _.each(params, function (v, k) {
        if (k == 'replace') {
            var replace = {};
            if (_.isObject(v)) {
                for (var i in v) {
                    info.splice(+i, 1, v[i]);
                }
            }
        } else {
            info.splice(k, 0, v);
        }
    });

    var infoString = info.join('|');

    logger.info(infoString);

    if (!openId) {
        logger.warn('OpenId is null: %s', infoString);
        return;
    }

    sendLog(infoString, logger);
};

function logFormat() {

    var args = _.map(arguments, function (item) {
        if (_.isDate(item)) {
            return dateFormat(item, "yyyy-MM-dd hh:mm:ss");
        }

        return item;
    });

    var infoString = args.join('|');
//    var infoString = util.format.apply(null, args);
    var logger = pomeloLogger.getLogger('tlog', this.categoryName);

    logger.info(infoString);

    sendLog(infoString, logger);
};

function sendLog(infoString, logger) {

    if (!client || !usedConfig.hosts || !usedConfig.hosts.length) {
        logger.debug('No avaliable UDP client to send message %j, %s', usedConfig.hosts, infoString);
        return;
    }

    var selected = usedSelectedHost++ % usedConfig.hosts.length;
    if (!usedConfig.sequence) {
        selected = _.random(usedConfig.hosts.length - 1);
    }

    var message = new Buffer(infoString + '\n');
    client.send(message, 0, message.length, usedConfig.hosts[selected].port, usedConfig.hosts[selected].host,
                function (err, bytes) {
                    if (!!err) {
                        throw err;
                    }

                    logger.debug('UDP message sent to selected %s %s:%s:%s', selected, usedConfig.hosts[selected].host,
                                 usedConfig.hosts[selected].port, infoString);

//        console.log('UDP message sent to ' + usedHost + ':' + usedPort);
//        client.close();
                });
};
